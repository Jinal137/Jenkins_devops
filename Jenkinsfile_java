pipeline {
    agent {label 'node1' }

    environment {
        CHECKSUM_FILE = 'checksum.md5'
        REMOTE_HOST = 'jenkins@192.168.29.92'
        JAVA_FILE = 'Hello.java'
        REMOTE_PATH = '/home/jenkins'
    }

    stages {
    
    	stage('Clone') {
            steps {
            	git url: 'https://github.com/Jinal137/Java.git', branch: 'master'
            }
        }
        stage('Apache Tomcat Installation') {
            steps {
                script {
                    echo "${Target_Instance}"
                    def tomcatDir = "/opt/tomcat"
                    def checkTomcatCmd = "if [ ! -d ${tomcatDir} ]; then echo 'not_installed'; else echo 'installed'; fi"

                    def result = sh(script: "ssh ${REMOTE_HOST} '${checkTomcatCmd}'", returnStdout: true).trim()

                    if (result != 'not_installed') {
                    
                    	echo 'Apache Tomcat is already installed.'
                    	return
                        
                        
                    }
                     def install_tomcat = sh(script: ''' ssh ${REMOTE_HOST} """
                        wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.96/bin/apache-tomcat-9.0.96.tar.gz""" ''', returnStdout: true).trim()

                    if (install_tomcat == 0) {
                    
                    	echo 'Apache Tomcat was not Installed.'
                    	exit 1
                        
                        
                    }

                  sh '''
                    	ssh ${REMOTE_HOST} """
                        
                        tar -xvzf apache-tomcat-9.0.96.tar.gz
                        sudo mv apache-tomcat-9.0.96 /opt/tomcat
                        sudo chown -R jenkins:jenkins /opt/tomcat """
                        '''
                        echo 'Apache Tomcat is now installed.'
                }
            }
        }
        stage('Create Tomcat Service') {
            steps {
                script {
                    def serviceCheckCmd = "systemctl is-active tomcat"
                    def serviceExists = sh(script: "ssh ${REMOTE_HOST} '${serviceCheckCmd}'", returnStatus: true)
                    if (serviceExists == 0)
                    	  echo 'Tomcat service already exists.'
                        
                         return
                    } 
                    sh """
                            ssh ${REMOTE_HOST} '''
                            sudo nano /etc/systemd/system/tomcat.service
                            echo "
                            [Unit]
                            Description=Apache Tomcat Web Application Container
                            After=network.target

                            [Service]
                            Type=simple
                            User=jenkins
                            Group=jenkins
                            Environment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64  # Update as necessary
                            Environment=CATALINA_HOME=/opt/tomcat
                            Environment=CATALINA_BASE=/opt/tomcat
                            ExecStart=/opt/tomcat/bin/startup.sh
                            ExecStop=/opt/tomcat/bin/shutdown.sh
                            RestartSec=10
                            Restart=always

                            [Install]
                            WantedBy=multi-user.target" | sudo tee /etc/systemd/system/tomcat.service
                            sudo systemctl daemon-reload
                            sudo systemctl enable tomcat
                            sudo systemctl start tomcat
                            '''
                        """
                        echo 'Tomcat service created and started.'
                }
            }
        

        stage('Compile Java File') {
            steps {
                script {

                    sh '''
                            ssh ${REMOTE_HOST} '
                            [ ! -d "J_Java/webapp/WEB-INF/classes" ] && mkdir -p "J_Java/webapp/WEB-INF/classes" || echo "already exists"
                            sudo chown -R jenkins:jenkins J_Java
                            '
                          
                    '''
                }
            }
        }
        
        stage('Checksum') {
            steps {
            	script{

		        env.CHECKSUM = sh(script: "md5sum ${JAVA_FILE} | awk '{ print \$1 }'",returnStdout: true).trim()
                }
            }
        }
        
        stage('Copy File') {
            steps {
                script {
                    sh """
                    	     scp ${JAVA_FILE} ${REMOTE_HOST}:${REMOTE_PATH}/J_Java/
                            
                    """
                }
            }
        }
        
        stage('Check Checksum') {
            steps {
                script {
                
                    def remoteChecksum = sh(
    script: "ssh ${REMOTE_HOST} 'md5sum ${REMOTE_PATH}/J_Java/${JAVA_FILE}'",returnStdout: true).tokenize()[0]
    
    		     def storedChecksum = sh(script: "ssh ${REMOTE_HOST} 'echo ${env.CHECKSUM}'", returnStdout: true).trim()
    		     
    		     echo "Local checksum: ${env.CHECKSUM}"
                    echo "Remote checksum: ${remoteChecksum}"
                    echo "Stored checksum: ${storedChecksum}"
    		     
    		     if (remoteChecksum == storedChecksum) {
    		         echo "Checksum verified successfully: ${remoteChecksum}"
    		         return
                       
                    } 
                     error "Checksum verification failed: ${remoteChecksum} != ${storedChecksum}"
                    
                    
                }
            }
        }



        stage('WAR File') {
            steps {
                script {
                    sh """
                    	     scp ${JAVA_FILE} ${REMOTE_HOST}:${REMOTE_PATH}/J_Java/
                            ssh ${REMOTE_HOST} '''
                            cd ${REMOTE_PATH}/J_Java
                            javac -cp "/opt/tomcat/lib/servlet-api.jar" ${JAVA_FILE}
                            echo "cp Hello.class webapp/WEB-INF/classes/"
                            cp Hello.class webapp/WEB-INF/classes/
                            cd webapp
                            jar -cvf ../hellojinal.war * 
                            cp ${REMOTE_PATH}/J_Java/hellojinal.war /opt/tomcat/webapps/
                            '''

                    """
                }
            }
        }
    }
}

